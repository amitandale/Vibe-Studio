#!/usr/bin/env bash
set -euo pipefail

usage() {
  cat <<'USAGE'
Usage: provision_lane_env.sh <lane> [--interactive] [--pg-password VALUE] [--random-pg-password] [--edge-env-file PATH] [--force]

Provision a Supabase lane environment file with random secrets.

Options:
  --interactive           Securely prompt for the Postgres password (ignored if --pg-password is provided)
  --pg-password VALUE     Provide the Postgres password non-interactively
  --random-pg-password    Generate a strong Postgres password automatically (default when no password provided)
  --edge-env-file PATH    Override the default edge runtime env file path
  --force                 Overwrite the existing env file without prompting
  -h, --help              Show this help message

Lanes: main, work, codex
USAGE
}

if [[ ${1:-} == "-h" || ${1:-} == "--help" || $# -eq 0 ]]; then
  usage
  exit 0
fi

require_cmd() {
  if ! command -v "$1" >/dev/null 2>&1; then
    echo "required command '$1' not found" >&2
    exit 1
  fi
}

require_cmd openssl

lane="$1"; shift || true
case "$lane" in
  main|work|codex) ;;
  *)
    echo "invalid lane '$lane' (expected main, work, codex)" >&2
    usage
    exit 2
    ;;
esac

interactive=false
auto_password=false
pg_password=""
edge_env_file=""
force=false

while [[ $# -gt 0 ]]; do
  case "$1" in
    --interactive)
      interactive=true
      shift
      ;;
    --pg-password)
      pg_password="${2:?missing password value}"
      shift 2
      ;;
    --edge-env-file)
      edge_env_file="${2:?missing edge env path}"
      shift 2
      ;;
    --force)
      force=true
      shift
      ;;
    --random-pg-password)
      auto_password=true
      shift
      ;;
    *)
      echo "unknown option '$1'" >&2
      usage
      exit 2
      ;;
  esac
done

generated_password=false

if [[ -z "$pg_password" ]]; then
  if [[ "$interactive" == true ]]; then
    read -rsp "Enter Postgres password for lane '$lane': " pg_password
    echo
    if [[ -z "$pg_password" ]]; then
      echo "password cannot be empty" >&2
      exit 2
    fi
  else
    auto_password=true
  fi
fi

if [[ "$auto_password" == true && -z "$pg_password" ]]; then
  pg_password="$(openssl rand -hex 32)"
  generated_password=true
fi

root="$(cd "$(dirname "$0")/../.." && pwd)"
lanes_dir="$root/ops/supabase/lanes"
mkdir -p "$lanes_dir"

env_file="$lanes_dir/${lane}.env"
if [[ -f "$env_file" && "$force" != true ]]; then
  if [[ -t 0 && -t 1 ]]; then
    read -rp "Environment file $env_file exists. Overwrite? [y/N]: " answer || true
    case "$answer" in
      y|Y|yes|YES)
        ;;
      *)
        echo "ℹ️  Environment file $env_file unchanged." >&2
        exit 0
        ;;
    esac
  else
    echo "ℹ️  Environment file $env_file already exists; skipping (use --force to overwrite)." >&2
    exit 0
  fi
fi

case "$lane" in
  main)
    pg_port=5433
    pg_db="vibe_main"
    kong_port=8101
    edge_port=9901
    default_edge_env="/etc/supabase/edge-main.env"
    ;;
  work)
    pg_port=5434
    pg_db="vibe_work"
    kong_port=8102
    edge_port=9902
    default_edge_env="/etc/supabase/edge-work.env"
    ;;
  codex)
    pg_port=5435
    pg_db="vibe_codex"
    kong_port=8103
    edge_port=9903
    default_edge_env="/etc/supabase/edge-codex.env"
    ;;
  *)
    echo "unsupported lane '$lane'" >&2
    exit 2
    ;;
esac

if [[ -z "$edge_env_file" ]]; then
  edge_env_file="$default_edge_env"
fi

jwt_secret="$(openssl rand -base64 32)"
anon_key="$(openssl rand -hex 32)"
service_role_key="$(openssl rand -hex 32)"

old_umask="$(umask)"
umask 177
cat >"$env_file" <<ENV
# Generated by provision_lane_env.sh on $(date -u +%Y-%m-%dT%H:%M:%SZ)
COMPOSE_PROJECT_NAME=supa-${lane}
LANE=${lane}
VOL_NS=${lane}

PGHOST=127.0.0.1
PGPORT=${pg_port}
PGDATABASE=${pg_db}
PGUSER=postgres
PGPASSWORD=${pg_password}

KONG_HTTP_PORT=${kong_port}
EDGE_PORT=${edge_port}
EDGE_ENV_FILE=${edge_env_file}

JWT_SECRET=${jwt_secret}
ANON_KEY=${anon_key}
SERVICE_ROLE_KEY=${service_role_key}
ENV
chmod 600 "$env_file"
umask "$old_umask"

if [[ "$generated_password" == true ]]; then
  echo "ℹ️  Generated a random Postgres password for lane '$lane'. The value is stored inside $env_file." >&2
fi

cat <<'NOTE'
⚠️  Temporary Supabase API keys generated. Replace JWT_SECRET, ANON_KEY, and SERVICE_ROLE_KEY with production keys issued by your Supabase tooling before going live.
NOTE

echo "✅ Wrote $env_file with permissions 600"
