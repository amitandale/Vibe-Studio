#!/usr/bin/env bash
set -euo pipefail

usage() {
  cat <<'USAGE'
Usage: provision_lane_env.sh <lane> --pg-password <password> [--edge-env-file PATH] [--force]

Generate the lane environment file with random Supabase secrets.

Options:
  --pg-password <password>   Required Postgres password for the lane user.
  --edge-env-file <path>     Override path for the lane's edge runtime env file.
  --force                    Overwrite any existing environment file.

Lane must be one of: main, work, codex.
USAGE
}

if [[ ${1:-} == "-h" || ${1:-} == "--help" || $# -eq 0 ]]; then
  usage
  exit 0
fi

if ! command -v python3 >/dev/null 2>&1; then
  echo "python3 is required to generate secrets" >&2
  exit 1
fi

lane="$1"; shift || true
case "$lane" in
  main|work|codex) ;;
  *)
    echo "unknown lane '$lane'" >&2
    usage
    exit 2
    ;;
esac

pg_password=""
edge_env_file=""
overwrite=false

while [[ $# -gt 0 ]]; do
  case "$1" in
    --pg-password)
      pg_password="${2:?password value}"; shift 2 ;;
    --edge-env-file)
      edge_env_file="${2:?edge env path}"; shift 2 ;;
    --force)
      overwrite=true; shift ;;
    *)
      echo "unknown option '$1'" >&2
      usage
      exit 2
      ;;
  esac
done

if [[ -z "$pg_password" ]]; then
  echo "--pg-password is required" >&2
  usage
  exit 2
fi

root="$(cd "$(dirname "$0")/../.." && pwd)"
dir="$root/ops/supabase/lanes"
mkdir -p "$dir"

env_file="$dir/${lane}.env"
if [[ -f "$env_file" && "$overwrite" != true ]]; then
  echo "env file $env_file already exists; use --force to overwrite" >&2
  exit 1
fi

case "$lane" in
  main)
    pg_port=5433
    pg_db="vibe_main"
    kong_port=8101
    edge_port=9901
    default_edge_env="/etc/supabase/edge-main.env"
    ;;
  work)
    pg_port=5434
    pg_db="vibe_work"
    kong_port=8102
    edge_port=9902
    default_edge_env="/etc/supabase/edge-work.env"
    ;;
  codex)
    pg_port=5435
    pg_db="vibe_codex"
    kong_port=8103
    edge_port=9903
    default_edge_env="/etc/supabase/edge-codex.env"
    ;;
  *)
    echo "unsupported lane" >&2
    exit 2
    ;;
esac

if [[ -z "$edge_env_file" ]]; then
  edge_env_file="$default_edge_env"
fi

random_secret() {
  python3 - <<'PY'
import secrets
print(secrets.token_urlsafe(48))
PY
}

jwt_secret="$(random_secret)"
anon_key="$(random_secret)"
service_role_key="$(random_secret)"

cat > "$env_file" <<ENV
# Generated by provision_lane_env.sh on $(date -u +%Y-%m-%dT%H:%M:%SZ)
COMPOSE_PROJECT_NAME=supa-${lane}
LANE=${lane}
VOL_NS=${lane}

PGHOST=127.0.0.1
PGPORT=${pg_port}
PGDATABASE=${pg_db}
PGUSER=postgres
PGPASSWORD=${pg_password}

KONG_HTTP_PORT=${kong_port}
EDGE_PORT=${edge_port}
EDGE_ENV_FILE=${edge_env_file}

JWT_SECRET=${jwt_secret}
ANON_KEY=${anon_key}
SERVICE_ROLE_KEY=${service_role_key}
ENV

chmod 600 "$env_file"
echo "Wrote $env_file"
